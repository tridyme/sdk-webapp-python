{"version":3,"file":"static/js/26.0b4df0be.chunk.js","mappings":"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","sources":["App.js","serviceWorker.js","bootstrap.js"],"sourcesContent":["import React, { Component, useState, useEffect, useMemo } from 'react';\nimport Helmet from 'react-helmet';\nimport {\n  Router,\n  Switch,\n  Route,\n  Redirect,\n  BrowserRouter,\n} from 'react-router-dom';\nimport './App.css';\nimport history from './history';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { ThemeProvider, createTheme } from '@material-ui/core/styles';\nimport AppContainerElem from './Components/AppContainerElem';\nimport {\n  ListItem,\n  ListItemAvatar,\n  Avatar,\n  ListItemText\n} from '@material-ui/core';\nimport Icon from './logo.svg';\nimport Logo from './logo.svg';\nimport RectangularSectionAnalysis from './Views/RectangularSectionAnalysis/RectangularSectionAnalysis';\nimport DashboardIcon from '@material-ui/icons/Dashboard';\nimport LogoApp from './EC2-Ferraillage.svg';\nimport GetTheme from './theme';\n\nconst Menu = {\n  MenuNavBar: [\n    { text: \"\", link: \"\", href: \"\", icon: \"\" }\n  ],\n  MenuSideBarSup: [\n    { text: \"Plateforme\", link: \"\", href: \"http://socotec.tridyme.com/dashboard\", icon: <DashboardIcon /> },\n  ],\n  MenuSideBarInf: [\n   \n    { text: \"GitHub\", link: \"\", href: \"https://github.com/Igor-TriDyme/bolts-app.git\", icon: \"code\" },\n  ],\n\n  MenuSideBarNotion: [\n   \n    { text: \"Documentation\", link: \"\", href: \"https://www.notion.so/tridyme/CB71-RectangularSection-Calcul-de-pannes-et-poutres-en-bois-3da4109cc8194f47aade5d4cbb554273\", icon: \"code\" },\n  ],\n\n};\n\nconst {\n  REACT_APP_LOGO,\n  REACT_APP_COMPANY,\n  REACT_APP_APPLICATION_ID,\n  REACT_APP_PLATFORM_URL\n} = process.env;\n\nconst App = () => {\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n  const theme = useMemo(\n    () => createTheme(GetTheme({ prefersDarkMode })),\n    [prefersDarkMode],\n  );\n\n  useEffect(() => {\n    const init = async () => {\n      const userInfo = localStorage.getItem('user');\n      console.log('user', userInfo);\n      const newUser = JSON.parse(userInfo);\n      console.log('newUser', newUser);\n    }\n    init();\n  }, []);\n\n\n  const handleBack = () => {\n    console.log(\"get back\")\n    window.location.href = `${REACT_APP_PLATFORM_URL}/applications/ID${REACT_APP_APPLICATION_ID}/models`;\n    // history.push('/applications/ID5899e0aca600741755433909/models')\n  }\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Helmet>\n        <title>{`TriDyme | Applications`}</title>\n        <link rel=\"icon\" type=\"image/png\" href={Logo} sizes=\"16x16\" />\n      </Helmet>\n      <BrowserRouter history={history}>\n        <AppContainerElem\n          title={<ListItem>\n            <ListItemAvatar>\n              <Avatar\n                alt={`EC2-Ferraillage`}\n                src={LogoApp}\n                style={{borderRadius:'0%'}}\n              />\n            </ListItemAvatar>\n            <ListItemText primary={`EC2- Ferraillage`} />\n          </ListItem>}\n          menu={Menu}\n        >\n          <Switch>\n            <Route exact path={`/applications/ID${REACT_APP_APPLICATION_ID}`} component={RectangularSectionAnalysis} />\n            <Route exact path={`/applications/ID${REACT_APP_APPLICATION_ID}/models/:modelId`} component={RectangularSectionAnalysis} />\n            <Redirect from=\"/\" to={`/applications/ID${REACT_APP_APPLICATION_ID}`} component={RectangularSectionAnalysis}/>\n          </Switch>\n        </AppContainerElem>\n      </BrowserRouter>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();"],"names":["Menu","MenuNavBar","text","link","href","icon","MenuSideBarSup","React","DashboardIcon","MenuSideBarInf","MenuSideBarNotion","REACT_APP_APPLICATION_ID","process","prefersDarkMode","useMediaQuery","theme","useMemo","createTheme","GetTheme","useEffect","init","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","userInfo","newUser","wrap","_context","prev","next","localStorage","getItem","console","log","JSON","parse","stop","apply","arguments","ThemeProvider","Helmet","rel","type","Logo","sizes","BrowserRouter","history","AppContainerElem","title","ListItem","ListItemAvatar","Avatar","alt","src","LogoApp","style","borderRadius","ListItemText","primary","menu","Switch","Route","exact","path","concat","component","RectangularSectionAnalysis","Redirect","from","to","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","App","document","getElementById","URL","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"sourceRoot":""}